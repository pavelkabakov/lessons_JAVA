package sem_13.Ex001;

/**
 * Конечно! Давайте вкратце опишем популярные паттерны проектирования:
 *
 * Паттерн Singleton (Одиночка): Гарантирует, что у класса есть только один экземпляр и предоставляет глобальную точку доступа к этому экземпляру.
 *
 * Паттерн Factory Method (Фабричный метод): Предоставляет интерфейс для создания объектов в суперклассе, но позволяет подклассам изменять тип создаваемых объектов.
 *
 * Паттерн Abstract Factory (Абстрактная фабрика): Предоставляет интерфейс для создания семейств взаимосвязанных объектов без указания их конкретных классов.
 *
 * Паттерн Builder (Строитель): Используется для создания сложных объектов шаг за шагом, позволяя использовать один и тот же код строительства для создания различных представлений объекта.
 *
 * Паттерн Prototype (Прототип): Позволяет копировать существующий объект без привязки к его конкретному классу. Может быть поверхностным или глубоким.
 *
 * Паттерн Adapter (Адаптер): Позволяет объектам с несовместимыми интерфейсами работать вместе, обеспечивая промежуточный слой для преобразования вызовов.
 *
 * Паттерн Decorator (Декоратор): Позволяет добавлять дополнительное поведение объекту на лету, не изменяя его структуры. Предоставляет гибкую альтернативу созданию подклассов.
 *
 * Паттерн Proxy (Заместитель): Представляет суррогатный объект, который контролирует доступ к другому объекту и позволяет добавить дополнительную логику до или после основного доступа.
 *
 * Паттерн Observer (Наблюдатель): Определяет зависимость "один ко многим" между объектами, так что при изменении состояния одного объекта происходит автоматическое оповещение и обновление всех зависимых объектов.
 *
 * Паттерн Strategy (Стратегия): Определяет семейство алгоритмов, инкапсулирует каждый из них и делает их взаимозаменяемыми. Позволяет изменять алгоритмы независимо от клиентов, которые их используют.
 *
 * Паттерн Command (Команда): Инкапсулирует запросы или операции в отдельные объекты, позволяя параметризовать клиентов с разными запросами, задерживать выполнение запросов или ставить их в очередь, а также поддерживать отмену операций.
 *
 * Паттерн Composite (Компоновщик): Позволяет создавать иерархические структуры из объектов, а также работать с ними так же, как с одиночными объектами.
 *
 * Паттерн Template Method (Шаблонный метод): Определяет скелет алгоритма в базовом классе, оставляя реализацию некоторых шагов подклассам.
 *
 * Паттерн Iterator (Итератор): Предоставляет способ последовательного доступа ко всем элементам коллекции без раскрытия ее внутреннего представления.
 *
 * Паттерн State (Состояние): Позволяет объекту менять свое поведение при изменении его внутреннего состояния, создавая различные варианты поведения.
 */

public class Main {
}
